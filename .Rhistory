t.test(x = baby$age[baby$smoke == "Fumeuse"], y = baby$bwt[baby$smoke == "Non-fumeuse"])
t.test(x = baby$taille[baby$smoke == "Fumeuse"], y = baby$bwt[baby$smoke == "Non-fumeuse"])
t.test(x = baby$height[baby$smoke == "Fumeuse"], y = baby$bwt[baby$smoke == "Non-fumeuse"])
t.test(x = baby$gestation[baby$smoke == "Fumeuse"], y = baby$bwt[baby$smoke == "Non-fumeuse"])
t.test(x = baby$age[baby$smoke == "Fumeuse"], y = baby$bwt[baby$smoke == "Non-fumeuse"])
t.test(x = baby$height[baby$smoke == "Fumeuse"], y = baby$bwt[baby$smoke == "Non-fumeuse"])
avant = c(44.9,55.9,56.3,56.3,58.5,62.9,63.1,63.8,65.6,67.1,68,68.4)
après = c(47.7,57.9,59.61,61.8,57.6,60.1,64.9,70.4,68,71.1,71.1,69.7)
boxplot(avant, apres, las=1,ylab="Poids(kgs)", names=c("Avant", "Apres"))
boxplot(avant, après, las=1,ylab="Poids(kgs)", names=c("Avant", "Apres"))
avant = c(44.9,55.9,56.3,56.3,58.5,62.9,63.1,63.8,65.6,67.1,68,68.4)
après = c(47.7,57.9,59.61,61.8,57.6,60.1,64.9,70.4,68,71.1,71.1,69.7)
boxplot(avant, après, las=1,ylab="Poids(kgs)", names=c("Avant", "Apres"))
plot(x = avant, y = après, xlim = c(44,71), ylim=c(44,71), xlab="Poids avant grossesse(kg)", ylab="Poids après grossesse(kg), pch=19, las=1")
abline(b=1,a=0,lty=2)
boxplot(avant, après, las=1,ylab="Poids(kgs)", names=c("Avant", "Apres")) #On perd la variabilité individuelle
plot(x = avant, y = après, xlim = c(44,71), ylim=c(44,71), xlab="Poids avant grossesse(kg)", ylab="Poids après grossesse(kg), pch=19, las=1")
abline(b=1,a=0,lty=2) #Trace droite de régression liénaire
t.test(x=avant,y=après)
t.test(x=avant,y=après, paired = TRUE) #Pour chaque individus
?t.test()
wilcox.test(x=baby$bwt[baby$smoke=="Fumeuse"], y = baby$bwt[baby$smoke=="Non-fumeuse"])
a = table(baby$smoke,baby$parity)
(a = table(baby$smoke,baby$parity))
fischer.test(a)
fisher.test(a)
#H0 il n'y a pas de différence de nombre d'enfants par mère entre les fumeuses et le snon fumeuses
#H1 Il y a une différence
t.test(x = baby$weight[baby$parity=="1ere"], y = baby$weight[baby$parity == "2eme+"])
age = boxplot(baby$age~baby$smoke, las=1, ylab="Age de la mère", xlab="Statut fumeur de la mère")
boxplot(avant, après, las=1,ylab="Poids(kgs)", names=c("Avant", "Apres")) #On perd la variabilité individuelle
gestation = boxplot(baby$gestation~baby$smoke, las=1, ylab="Temps de gestation[j]", xlab="Statut fumeur de la mère")
boxplot(avant, après, las=1,ylab="Poids(kgs)", xlab=c("Avant", "Apres")) #On perd la variabilité individuelle
boxplot(avant, après, las=1,ylab="Poids(kgs)", names=c("Avant", "Apres")) #On perd la variabilité individuelle
poids = boxplot(baby$bwt~baby$smoke, las=1, ylab="Poids du bebe[kg]", xlab="Statut fumeur de la mère")
#H0 il n'y a pas de différence de nombre d'enfants par mère entre les fumeuses et le snon fumeuses
#H1 Il y a une différence
t.test(x = baby$weight[baby$parity=="1ere"], y = baby$weight[baby$parity == "2eme+"])
wilcox.test(x = baby$weight[baby$parity=="1ere"], y = baby$weight[baby$parity == "2eme+"]))
wilcox.test(x = baby$weight[baby$parity=="1ere"], y = baby$weight[baby$parity == "2eme+"])
wilcox.test(x = baby$weight[baby$parity=="1ere"], y = baby$weight[baby$parity == "2eme+"])
(a = table(baby$smoke,baby$parity))
fisher.test(a)
#p value de 0.007791 Beacoup plus grande mais reste quand même sous les 0.05, donc H0 est rejettée dans les 2 cas
boxplot(baby$weight~baby$parity, xlab="Nombre d'enfants", ylab="Poids en kg")
##Force##
Sept = c(33,42.5,54,60,61,68,69,72,86)
Feb = c(38,45,52,63,61,75,66,70,81,90)
hist(Sept)
hist(Feb)
hist(Sept)#Loi normale un peu près correct
boxplot(Sept,Feb, ylab= "Force statique(kg)", names=c(Septembre,Février))
boxplot(Sept,Feb, ylab= "Force statique(kg)", names=c("Septembre","Février"))
#Loi non paramétrique pour commencer et pas sûr pour la loi normale
wilcox.test(x=Sept, yFeb)
#Loi non paramétrique pour commencer et pas sûr pour la loi normale
wilcox.test(x=Sept, y=Feb)
t.test(x=Sep, y=Feb)
t.test(x=Sept, y=Feb)
25*0.6
M1 = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0)
length(M1)
M1 = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0)
length(M1)
length(M2)
M2 = c(1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0)
length(M2)
Meth = c("M1", "M2")
Lire = c("Ne sait pas lire", "Sait lire")
données = c(15,10,10,10)
?data.frame()
?data.frame(données, row.names=Meth, col.names=Lire)
(Tableau=data.frame(données, row.names=Meth, col.names=Lire))
M2 = c(1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0)
Sait_lire = c(15,10)
(Tableau = data.frame(Methode, Sait_lire, Ne_sait_pas_lire))
Methode = c("M1", "M2")
(Tableau = data.frame(Methode, Sait_lire, Ne_sait_pas_lire))
Sait_lire = c(15,10)
Ne_sait_pas_lire = c(10,10)
(Tableau = data.frame(Methode, Sait_lire, Ne_sait_pas_lire))
View(Tableau)
wilcox.test(x = Tableau$Sait_lire[Tableau$Methode=="M1"], y = Tableau$Sait_lire[Tableau$Methode=="M2"])
wilcox.test(M1,M2)
##########baby###################
t.test(baby$bwt[baby$smoke == "Fumeuse"], baby$bwt[baby$smoke == "Non-fumeuse"])
tpsgesta = table(baby$smoke, baby$gestation)
(tpsgesta = table(baby$smoke, baby$gestation))
hist(baby$gestation)
hist(baby$gestation[baby$smoke =="Fumeuse"])
lines(density(baby$gestation[baby$smoke == "Fumeuse"]))
(lines(density(baby$gestation[baby$smoke == "Fumeuse"])))
hist(baby$gestation[baby$smoke =="Fumeuse"], freq = False)
hist(baby$gestation[baby$smoke =="Fumeuse"], freq = FALSE)
(lines(density(baby$gestation[baby$smoke == "Fumeuse"])))
hist(baby$gestation[baby$smoke =="Non-umeuse"], freq = FALSE)
hist(baby$gestation[baby$smoke =="Non-fumeuse"], freq = FALSE)
(lines(density(baby$gestation[baby$smoke == "Non-fumeuse"])))
t.test(baby$gestation[baby$smoke == "Fumeuse"], baby$gestation[baby$smoke == "Non-fumeuse"])
?t?test()
?t.test()
#4
prop.test(x = Tableau_fumeuse[1], n=sum(Tableau_fumeuse), p=0.20)
prop.test(x = Tableau_fumeuse[1], n=sum(Tableau_fumeuse))
prop.test(x = baby$parity[baby$parity == "2eme" & baby$smoke == "Fumeuse"], n=sum(baby$parity[baby$parity == "2eme"]))
prop.test(x = baby$parity[baby$parity == "2eme" & baby$smoke == "Fumeuse"], n=length(baby$parity[baby$parity == "2eme"]))
prop.test(x = length(baby$parity[baby$parity == "2eme" & baby$smoke == "Fumeuse"]), n=length(baby$parity[baby$parity == "2eme"]))
length(baby$parity[baby$parity == "2eme"]
(length(baby$parity[baby$parity == "2eme"])
(baby$parity[baby$parity == "2eme"])
(a = baby$parity[baby$parity == "2eme"])
(a = baby$parity[baby$parity == "2eme+"])
prop.test(x = length(baby$parity[baby$parity == "2eme+" & baby$smoke == "Fumeuse"]), n=length(baby$parity[baby$parity == "2eme+"]))
prop.test(x = length(baby$parity[baby$parity == "2eme+" & baby$smoke == "Non-fumeuse"]), n=length(baby$parity[baby$parity == "2eme+"]))
concentration = c(20,10,5,2.5,1.25,0.62,0.31,0.15,0.08,0.04,0.02)
DO = c(0.43,0.346,0.283,0.197,0.122,0.073,0.046,0.032,0.024,0.005,0.002)
data = data.frame(concentration, DO)
data
data$logDO = log(data$DO)
data$logConc = log(data$concentration)
data
plot(data$logConc, data$logDO)
mymodel = lm(data$logConc, data$logDO)
mymodel
mymodel = lm(data$logConc~data$logDO)
mymodel
mymodel$coefficients
mymodel
mymodel$summary
summary(mymodel)
plot(data$concentration, data$DO)
mymodel = lm(data$logConc~data$logDO)
mymodel$coefficients
mymodel = lm(data$concentration~data$DO)
mymodel$coefficients
summary(mymodel)
mymodel = lm(data$concentration~data$logDO)
mymodel$coefficients
data
plot(data$concentration, data$logDO)
mymodel$coefficients
mymodel = lm(data$logDO~data$logConc)
mymodel$coefficients
plot(data$logDO~data$logConc)
mymodel = lm(data$logDO~data$logConc)
mymodel$coefficients
abline(a= -2.49, b = 0.73317)
abline(0)
abline(a = 0)
abline(a = 0, b = 0)
abline(a = 0, b = 0)
plot(data$logDO~data$logConc)
mymodel = lm(data$logDO~data$logConc)
mymodel$coefficients
abline(a= -2.49, b = 0.73317)
abline(a = 0, b = 0)
abline(c(0,0))
Gene1 <-c(10,11,8,3,2,1)
Gene2<-c(5,4,5,3,2.8,1)
Gene3<-c(12,9,10,2.5,1.3,2)
plot(Gene1, Gene2, col="blue", pch=19)
install.packages("scatterplot3d") # Install
library("scatterplot3d")
scatterplot3d(Gene1, Gene2, Gene3, color="blue", pch=19, main="3D Scatter Plot",
xlab = "Gene1",
ylab = "Gene2",
zlab = "Gene3")
# Charger le jeu de données Iris
data(iris)
View(iris)
########### Étape 2 : Centrage des données
features <- iris[, 1:4]
########### Étape 2 : Centrage des données
(features <- iris[, 1:4])
# Boxplot avant la mise à l'échelle
par(mfrow = c(1, 2))  # Diviser la fenêtre graphique en 1 ligne et 2 colonnes
boxplot(features, main = "Avant la mise à l'échelle", col = rainbow(4), cex.axis = 0.7)
# Mise à l'échelle des données
scaled_features <- scale(features)
# Boxplot après la mise à l'échelle
boxplot(scaled_features, main = "Après la mise à l'échelle", col = rainbow(4), cex.axis = 0.7)
help(scale)
# Boxplot après la mise à l'échelle
boxplot(scaled_features, main = "Après la mise à l'échelle", col = rainbow(4), cex.axis = 0.7)
boxplot(features, main = "Avant la mise à l'échelle", col = rainbow(4), cex.axis = 0.7)
############ Étape 3 : Calcul de la matrice de covariance
cov_matrix <- cov(centered_data)
############ Étape 3 : Calcul de la matrice de covariance
cov_matrix <- cov(scaled_features)
View(cov_matrix)
############# Étape 4 : Décomposition de la matrice de covariance
eigen_result <- eigen(cov_matrix)
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
# Boxplot avant la mise à l'échelle
par(mfrow = c(1, 1))  # Diviser la fenêtre graphique en 1 ligne et 2 colonnes
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
############# Étape 4 : Décomposition de la matrice de covariance
(eigen_result <- eigen(cov_matrix))
cumulative_proportion <- cumsum(eigen_result$values) / sum(eigen_result$values)
cumulative_proportion
# Trouver le nombre de composantes principales pour atteindre 70% ou 80%
num_components_70 <- which(cumulative_proportion >= 0.7)[1]
num_components_80 <- which(cumulative_proportion >= 0.8)[1]
# Visualiser le graphique avec la règle du 70-80%
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
# Visualiser le graphique avec la règle du 70-80%
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
# Ajouter des lignes pour indiquer le 70% et 80% de la variance expliquée
abline(h = 0.7, col = "red", lty = 2)
abline(h = 0.8, col = "green", lty = 2)
# Trouver le nombre de composantes principales pour atteindre 70% ou 80%
(num_components_70 <- which(cumulative_proportion >= 0.7)[1])
(num_components_80 <- which(cumulative_proportion >= 0.8)[1])
#Visualiser un scree plot
# Créer le scree plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(1:length(eigen_result$values), eigen_result$values,
type = "b", pch = 16, col = "blue",
xlab = "Composantes Principales", ylab = "Valeurs Propres",
main = "Scree Plot des valeurs propres")
plot(1:length(eigen_result$values), cumulative_proportion,
type = "b", pch = 16, col = "red",
xlab = "Composantes Principales", ylab = "Variabilité Cumulative Expliquée",
main = "Variabilité Cumulative Expliquée")
par(mfrow = c(1, 1))
# Sélectionner le nombre de composantes principales à conserver (par exemple, les deux premières)
num_components <- 2
selected_components <- eigen_result$vectors[, 1:num_components]
(selected_components <- eigen_result$vectors[, 1:num_components])
eigen_result
# Transformation des données
principal_components <- as.matrix(scaled_features) %*% selected_components
# Transformation des données
(principal_components <- as.matrix(scaled_features) %*% selected_components)
# Affichage des résultats
print("Matrice des composantes principales :")
print(principal_components)
# Visualisation des données transformées
plot(principal_components, col = iris$Species, pch = 16, main = "ACP des données Iris", ylab="", xlab="")
legend("topright", legend = levels(iris$Species), col = 1:3, pch = 16)
# Ajouter des étiquettes aux axes
xlabel <- sprintf("Composante Principale %d", 1)
ylabel <- sprintf("Composante Principale %d", 2)
title(xlab = xlabel, ylab = ylabel)
library(scatterplot3d)
colors <- c("setosa" = "red", "versicolor" = "green", "virginica" = "blue")
scatterplot3d(
transformed_data,
color = colors[iris$Species],
pch = 16,
main = "ACP des données Iris (3 premières composantes principales)",
xlab = "Composante Principale 1",
ylab = "Composante Principale 2",
zlab = "Composante Principale 3"
)
scatterplot3d(
principal_components,
color = colors[iris$Species],
pch = 16,
main = "ACP des données Iris (3 premières composantes principales)",
xlab = "Composante Principale 1",
ylab = "Composante Principale 2",
zlab = "Composante Principale 3"
)
legend("topright", legend = levels(iris$Species), fill = colors, pch = 16)
# # Créer le scree plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(1:length(eigen_result$values), eigen_result$values,
type = "b", pch = 16, col = "blue",
xlab = "Composantes Principales", ylab = "Valeurs Propres",
main = "Scree Plot des valeurs propres")
plot(1:length(eigen_result$values), cumulative_prop_var,
type = "b", pch = 16, col = "red",
xlab = "Composantes Principales", ylab = "Variabilité Cumulative Expliquée",
main = "Variabilité Cumulative Expliquée")
# Creation du bi-plot
par(mfrow = c(1, 1))
centered_data <- scale(iris[, 1:4])
biplot(prcomp(centered_data), cex = 0.7)
# # Créer le scree plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(1:length(eigen_result$values), eigen_result$values,
type = "b", pch = 16, col = "blue",
xlab = "Composantes Principales", ylab = "Valeurs Propres",
main = "Scree Plot des valeurs propres")
plot(1:length(eigen_result$values), cumulative_prop_var,
type = "b", pch = 16, col = "red",
xlab = "Composantes Principales", ylab = "Variabilité Cumulative Expliquée",
main = "Variabilité Cumulative Expliquée")
plot(1:length(eigen_result$values), cumulative_proportion,
type = "b", pch = 16, col = "red",
xlab = "Composantes Principales", ylab = "Variabilité Cumulative Expliquée",
main = "Variabilité Cumulative Expliquée")
plot(1:length(eigen_result$values), eigen_result$values,
type = "b", pch = 16, col = "blue",
xlab = "Composantes Principales", ylab = "Valeurs Propres",
main = "Scree Plot des valeurs propres")
plot(1:length(eigen_result$values), cumulative_proportion,
type = "b", pch = 16, col = "red",
xlab = "Composantes Principales", ylab = "Variabilité Cumulative Expliquée",
main = "Variabilité Cumulative Expliquée")
print(principal_components)
# Visualisation des données transformées
plot(principal_components, col = iris$Species, pch = 16, main = "ACP des données Iris", ylab="", xlab="")
legend("topright", legend = levels(iris$Species), col = 1:3, pch = 16)
# Ajouter des étiquettes aux axes
xlabel <- sprintf("Composante Principale %d", 1)
ylabel <- sprintf("Composante Principale %d", 2)
title(xlab = xlabel, ylab = ylabel)
library(scatterplot3d)
colors <- c("setosa" = "red", "versicolor" = "green", "virginica" = "blue")
scatterplot3d(
principal_components,
color = colors[iris$Species],
pch = 16,
main = "ACP des données Iris (3 premières composantes principales)",
xlab = "Composante Principale 1",
ylab = "Composante Principale 2",
zlab = "Composante Principale 3"
)
legend("topright", legend = levels(iris$Species), fill = colors, pch = 16)
# # Créer le scree plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
matrice = matrix(c(4.71, 8.75, 95.29, 91.75), nrow = 2, ncol = 2)
(matrice = matrix(c(4.71, 8.75, 95.29, 91.75), nrow = 2, ncol = 2))
fisher.test(matrice)
chisq.test((matrice))
(matrice = matrix(c(13.04, 5.36, 100-13.04, 100-5.36), nrow = 2, ncol = 2))
(matrice = matrix(c(13.04,100-13.04 , 5.36, 100-5.36), nrow = 2, ncol = 2))
chisq.test((matrice))
(matrice = matrix(c(17.31,100-17.31 , 8.25, 100-8.25), nrow = 2, ncol = 2))
chisq.test((matrice))
install.packages("randomForest")
library(randomForest)
data(iris)
iris
# Préparation des données 70 apprentissage et 30 de test
set.seed(123)
train_idx = sample(1:nrow(iris), 0.7*nrow(iris))
(train_idx = sample(1:nrow(iris), 0.7*nrow(iris)))
(train_idx = sample(1:nrow(iris), 0.7*nrow(iris)))
# Préparation des données 70 apprentissage et 30 de test
(set.seed(123))
data(iris)
# Préparation des données 70 apprentissage et 30 de test
(set.seed(123))  #Dit à R de commencer à prendre les valeurs aux lignes 1 2 3
# Ressort 70% des lignes
(train_idx = sample(1:nrow(iris), 0.7*nrow(iris)))
train_data = iris[train_idx,]
test_data = iris[-train_data,]
test_data = iris[-train_idx,]
(train_data = iris[train_idx,])
(test_data = iris[-train_idx,])
dim(test_data)
dim(train_data)
help(randomForest)
rf_model = randomForest(Species ~ ., data = train_data, ntree = 100)
# Prédiction de l'espèce en fonction des autres variables en utilisant 100 arbres
(rf_model = randomForest(Species ~ ., data = train_data, ntree = 100))
(predictions = predict(rf_model, test_data))
(accuracy = sum(predictions == test_data$Species) / nrow(test_data))
predictions == test_data$Species
sum(predictions == test_data$Species)
features_importance = importance(rf_model)
help(importance)
# Extrait les variables les plus importantes
(features_importance = importance(rf_model))
(sorted_importance = feature_importance[order(-feature_importance),])
(sorted_importance = features_importance[order(-feature_importance),])
(sorted_importance = features_importance[order(-features_importance),])
barplot(sorted_importance, horiz = T, main = "Importance des Caractéristiques", xlab = "Scored d'imporatnc",
cexnames =0.8, las = 1)
barplot(sorted_importance, horiz = T, main = "Importance des Caractéristiques", xlab = "Scored d'imporatnc",
cex.names =0.8, las = 1)
barplot(sorted_importance, horiz = T, main = "Importance des Caractéristiques", xlab = "Scored d'imporatnc",
cex.names =0.8, las = 1)
barplot(sorted_importance, horiz = F, main = "Importance des Caractéristiques", xlab = "Scored d'importance",
cex.names =0.8, las = 1)
library(ggplot2)
ggplot(geom_bar(data = sorted_importance))
(sorted_importance = features_importance[order(-features_importance),])
df = as.data.frame(sorted_importance)
ggplot(geom_bar(data = sorted_importance))
ggplot(geom_bar(data = df))
(df = as.data.frame(sorted_importance))
ggplot(geom_bar(data = df))
ggplot(df +
ggplot(df, geom_bar(stat = "identity", position = "dodge") +
ggplot(df, geom_bar(stat = "identity", position = "dodge") ,labs(x = "Réaction", y = "Valeur", fill = "Traitement"),theme_minimal()
ggplot(df, geom_bar(stat = "identity", position = "dodge"),theme_minimal())
ggplot(df, geom_bar(stat = "identity", position = "dodge") ,labs(x = "Réaction", y = "Valeur", fill = "Traitement"),theme_minimal())
ggplot(df, aes(x = r, y = valeur[1:2] , fill = colnames(vac2))) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Réaction", y = "Valeur", fill = "Traitement") +
theme_minimal())
ggplot(df, aes(x = r, y = valeur[1:2] , fill = colnames(vac2))) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Réaction", y = "Valeur", fill = "Traitement") +
theme_minimal())
ggplot(df, aes(x = r, y = valeur[1:2] , fill = colnames(vac2))) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Réaction", y = "Valeur", fill = "Traitement") +
theme_minimal()
ggplot(df, aes(x = row.names(df), y = df$sorted_importance , fill = colnames(vac2))) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Réaction", y = "Valeur", fill = "Traitement") +
theme_minimal()
barplot(sorted_importance, horiz = F, main = "Importance des Caractéristiques", xlab = "Scored d'importance",
cex.names =0.8, las = 1)
barplot(sorted_importance, horiz = T, main = "Importance des Caractéristiques", xlab = "Scored d'importance",
cex.names =0.8, las = 1)
barplot(sorted_importance, horiz = F, main = "Importance des Caractéristiques", xlab = "Scored d'importance",
cex.names =0.8, las = 1)
print("Enculé")
setwd("C:/Users/Edmond/OneDrive - Université Côte d'Azur/Documents/Cours/Cours Polytech/GB4/S1/Python/Github")
data = load("Matrice de contact de 1GC6")
`Matrice de contact de 1GC6` <- readRDS("~/Cours/Cours Polytech/GB4/S1/Python/Github/Matrice de contact de 1GC6.rds")
`Matrice de contact de 1GC6`
View(`Matrice de contact de 1GC6`)
plot(`Matrice de contact de 1GC6`)
heatmap(`Matrice de contact de 1GC6`)
df = as.matrix(Matrice de contact de 1GC6`)
df = as.matrix(`Matrice de contact de 1GC6`)
heatmap(`Matrice de contact de 1GC6`)
df = as.numeric(df)
heatmap(`Matrice de contact de 1GC6`)
type(df)
class(df)
heatmap(df)
class(df)
View(df)
df = as.matrix(`Matrice de contact de 1GC6`)
heatmap(df)
library(ggplot2)
# Exemple de matrice de contact (remplacez ceci par votre propre matrice)
matrice_contact <- matrix(runif(25), nrow = 5)
# Convertir la matrice en un dataframe
df <- as.data.frame(as.table(matrice_contact))
colnames(df) <- rownames(df) <- seq_along(matrice_contact)
# Créer le graphique avec ggplot2
ggplot(df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +  # Personnaliser la palette de couleurs
labs(title = "Heatmap de la Matrice de Contact",
x = "Position dans la Protéine",
y = "Position dans la Protéine") +
theme_minimal()
df = as.matrix(`Matrice de contact de 1GC6`)
df = as.numeric(df)
df = as.matrix(`Matrice de contact de 1GC6`)
# Créer le graphique avec ggplot2
ggplot(df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +  # Personnaliser la palette de couleurs
labs(title = "Heatmap de la Matrice de Contact",
x = "Position dans la Protéine",
y = "Position dans la Protéine") +
theme_minimal()
df = as.data.frame(`Matrice de contact de 1GC6`)
df = as.data.frame(`Matrice de contact de 1GC6`)
# Créer le graphique avec ggplot2
ggplot(df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +  # Personnaliser la palette de couleurs
labs(title = "Heatmap de la Matrice de Contact",
x = "Position dans la Protéine",
y = "Position dans la Protéine") +
theme_minimal()
seq_along(matrice_contact)
Var1
# Exemple de matrice de contact (remplacez ceci par votre propre matrice)
matrice_contact <- matrix(runif(25), nrow = 5)
# Convertir la matrice en un dataframe
df2 <- as.data.frame(as.table(matrice_contact))
colnames(df2) <- rownames(df2) <- seq_along(matrice_contact)
# Créer le graphique avec ggplot2
ggplot(df2, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +  # Personnaliser la palette de couleurs
labs(title = "Heatmap de la Matrice de Contact",
x = "Position dans la Protéine",
y = "Position dans la Protéine") +
theme_minimal()
Var1
# Exemple de matrice de contact (remplacez ceci par votre propre matrice)
(matrice_contact <- matrix(runif(25), nrow = 5))
# Convertir la matrice en un dataframe
(df2 <- as.data.frame(as.table(matrice_contact)))
# Convertir la matrice en un dataframe
(df2 <- as.data.frame(as.table(df)))
df = as.data.matrix(`Matrice de contact de 1GC6`)
df = as.matrix(`Matrice de contact de 1GC6`)
# Convertir la matrice en un dataframe
(df2 <- as.data.frame(as.table(df)))
# Créer le graphique avec ggplot2
ggplot(df2, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +  # Personnaliser la palette de couleurs
labs(title = "Heatmap de la Matrice de Contact",
x = "Position dans la Protéine",
y = "Position dans la Protéine") +
theme_minimal()
